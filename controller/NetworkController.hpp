//-------------------------------------------------------------
//【文件名】NetworkController.hpp
//【功能模块和目的】神经网络控制器（单例）声明
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------

#ifndef NetworkController_hpp
#define NetworkController_hpp

#include "../model/Network.hpp"
#include <memory>
#include <string>
#include <vector>

//-------------------------------------------------------------
//【类名】NetworkController
//【功能】神经网络业务逻辑控制器，单例模式
//【说明】MVC模式下的Controller层，协调界面与模型
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
class NetworkController {
private:
    static std::unique_ptr<NetworkController> m_instance;  // 单例实例
    std::unique_ptr<Network> m_network;    // 当前神经网络模型
    
    //-------------------------------------------------------------
    //【函数名称】NetworkController
    //【函数功能】私有构造函数，实现单例模式
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    NetworkController();
    
    //-------------------------------------------------------------
    //【函数名称】NetworkController
    //【函数功能】私有拷贝构造函数（禁用）
    //【参数】other：其他NetworkController对象
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    NetworkController(const NetworkController&) = delete;
    
    //-------------------------------------------------------------
    //【函数名称】operator=
    //【函数功能】私有赋值运算符（禁用）
    //【参数】other：其他NetworkController对象
    //【返回值】NetworkController&，禁用返回
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    NetworkController& operator=(const NetworkController&) = delete;

public:
    //-------------------------------------------------------------
    //【函数名称】getInstance
    //【函数功能】获取单例实例
    //【参数】无
    //【返回值】NetworkController&，单例对象引用
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    static NetworkController& getInstance();
    
    //-------------------------------------------------------------
    //【函数名称】cleanup
    //【函数功能】清理单例实例
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    static void cleanup();
    
    //-------------------------------------------------------------
    //【函数名称】~NetworkController
    //【函数功能】析构函数
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    ~NetworkController();
    
    //-------------------------------------------------------------
    //【函数名称】importNetwork
    //【函数功能】从文件导入神经网络
    //【参数】filename：要导入的文件路径
    //【返回值】bool，导入成功返回true，否则返回false
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool importNetwork(const std::string& filename);
    
    //-------------------------------------------------------------
    //【函数名称】exportNetwork
    //【函数功能】导出神经网络到文件
    //【参数】filename：要导出的文件路径
    //【返回值】bool，导出成功返回true，否则返回false
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool exportNetwork(const std::string& filename) const;
    
    //-------------------------------------------------------------
    //【函数名称】hasNetwork
    //【函数功能】检查当前是否已加载网络
    //【参数】无
    //【返回值】bool，存在网络返回true，否则返回false
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool hasNetwork() const;
    
    //-------------------------------------------------------------
    //【函数名称】validateNetwork
    //【函数功能】验证当前网络结构
    //【参数】无
    //【返回值】bool，网络有效返回true，否则返回false
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool validateNetwork() const;
    
    //-------------------------------------------------------------
    //【函数名称】getNetworkStatistics
    //【函数功能】获取网络统计信息的格式化字符串
    //【参数】无
    //【返回值】std::string，包含网络统计信息的字符串
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::string getNetworkStatistics() const;
    
    //-------------------------------------------------------------
    //【函数名称】getLayerInformation
    //【函数功能】获取所有层的信息
    //【参数】无
    //【返回值】std::string，包含层信息的字符串
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::string getLayerInformation() const;
    
    //-------------------------------------------------------------
    //【函数名称】getNeuronInformation
    //【函数功能】获取指定层中神经元的信息
    //【参数】layerIndex：层索引
    //【返回值】std::string，包含神经元信息的字符串
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::string getNeuronInformation(int layerIndex) const;
    
    //-------------------------------------------------------------
    //【函数名称】getNeuronConnections
    //【函数功能】获取指定神经元的连接信息
    //【参数】layerIndex：层索引，neuronIndex：神经元索引
    //【返回值】std::string，包含连接信息的字符串
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::string getNeuronConnections(int layerIndex, int neuronIndex) const;
    
    //-------------------------------------------------------------
    //【函数名称】addLayer
    //【函数功能】向网络添加新的空层
    //【参数】无
    //【返回值】bool，成功添加返回true，否则返回false
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool addLayer();
    
    //-------------------------------------------------------------
    //【函数名称】deleteLayer
    //【函数功能】从网络中删除指定层
    //【参数】layerIndex：要删除的层索引
    //【返回值】bool，成功删除返回true，否则返回false
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool deleteLayer(int layerIndex);
    
    //-------------------------------------------------------------
    //【函数名称】modifyNeuronBias
    //【函数功能】修改指定神经元的偏置值
    //【参数】layerIndex：层索引，neuronIndex：神经元索引，bias：新偏置值
    //【返回值】bool，成功修改返回true，否则返回false
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool modifyNeuronBias(int layerIndex, int neuronIndex, double bias);
    
    //-------------------------------------------------------------
    //【函数名称】deleteNeuron
    //【函数功能】删除指定神经元
    //【参数】layerIndex：层索引，neuronIndex：神经元索引
    //【返回值】bool，成功删除返回true，否则返回false
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool deleteNeuron(int layerIndex, int neuronIndex);
    
    //-------------------------------------------------------------
    //【函数名称】connectNeurons
    //【函数功能】用指定权重连接两个神经元
    //【参数】fromLayer：源层索引，fromNeuron：源神经元索引，toLayer：目标层索引，toNeuron：目标神经元索引，weight：连接权重
    //【返回值】bool，成功创建连接返回true，否则返回false
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool connectNeurons(int fromLayer, int fromNeuron, int toLayer, int toNeuron, double weight);
    
    //-------------------------------------------------------------
    //【函数名称】getInputSize
    //【函数功能】获取网络的输入尺寸
    //【参数】无
    //【返回值】int，输入神经元数量，无网络返回-1
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    int getInputSize() const;
    
    //-------------------------------------------------------------
    //【函数名称】runInference
    //【函数功能】使用给定输入在网络上运行推理
    //【参数】inputs：网络的输入值向量
    //【返回值】std::vector<double>，网络的输出值向量
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】推理失败时抛出std::runtime_error异常
    //-------------------------------------------------------------
    std::vector<double> runInference(const std::vector<double>& inputs) const;
};

#endif // NetworkController_hpp
