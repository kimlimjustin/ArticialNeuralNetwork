//-------------------------------------------------------------
//【文件名】BaseImporter.hpp
//【功能模块和目的】神经网络模型导入基类声明
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------

#ifndef BaseImporter_hpp
#define BaseImporter_hpp

#include "../model/neural_components/Network.hpp"
#include <memory>
#include <string>

using namespace std;

//-------------------------------------------------------------
//【类名】BaseImporter
//【功能】神经网络模型导入抽象基类
//【说明】支持多种文件格式的导入扩展
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
class BaseImporter {
public:
    //-------------------------------------------------------------
    //【函数名称】BaseImporter
    //【函数功能】默认构造函数
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    BaseImporter() = default;
    
    //-------------------------------------------------------------
    //【函数名称】BaseImporter（拷贝构造）
    //【函数功能】拷贝构造函数
    //【参数】other：被拷贝的导入器
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    BaseImporter(const BaseImporter& other) = default;
    
    //-------------------------------------------------------------
    //【函数名称】operator=
    //【函数功能】赋值运算符重载
    //【参数】other：赋值来源导入器
    //【返回值】BaseImporter&，自身引用
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    BaseImporter& operator=(const BaseImporter& other) = default;
    
    //-------------------------------------------------------------
    //【函数名称】~BaseImporter
    //【函数功能】虚析构函数
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    virtual ~BaseImporter() = default;
    
    //-------------------------------------------------------------
    //【函数名称】importNetwork
    //【函数功能】从文件导入神经网络
    //【参数】
    //  - const string& filename：要导入的文件路径
    //【返回值】
    //  - unique_ptr<Network>：导入的网络的唯一指针，导入失败时为nullptr
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    virtual unique_ptr<Network> importNetwork(const string& filename) = 0;
    
    //-------------------------------------------------------------
    //【函数名称】getSupportedExtensions
    //【函数功能】获取支持的文件扩展名
    //【返回值】
    //  - string：支持的文件扩展名字符串（例如：".ann"）
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    virtual string getSupportedExtensions() const = 0;
    
    //-------------------------------------------------------------
    //【函数名称】getImporterName
    //【函数功能】获取导入器名称/描述
    //【返回值】
    //  - string：描述导入器的字符串
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    virtual string getImporterName() const = 0;
    
    //-------------------------------------------------------------
    //【函数名称】isFormatSupported
    //【函数功能】检查文件格式是否受支持
    //【参数】
    //  - const string& filename：要检查的文件路径
    //【返回值】
    //  - bool：格式是否受支持
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    virtual bool isFormatSupported(const string& filename) const;

protected:
    //-------------------------------------------------------------
    //【函数名称】getFileExtension
    //【函数功能】从文件名中提取文件扩展名
    //【参数】
    //  - const string& filename：文件路径
    //【返回值】
    //  - string：小写的文件扩展名
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    string getFileExtension(const string& filename) const;
    
    //-------------------------------------------------------------
    //【函数名称】validateImportedNetwork
    //【函数功能】验证导入的神经网络
    //【参数】
    //  - const Network* network：要验证的网络
    //【返回值】
    //  - bool：网络是否有效
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool validateImportedNetwork(const Network* network) const;
};

#endif // BaseImporter_hpp
