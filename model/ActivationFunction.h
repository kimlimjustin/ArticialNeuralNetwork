//-------------------------------------------------------------
//【文件名】ActivationFunction.h
//【功能模块和目的】神经网络激活函数相关接口与实现声明
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------

#ifndef ACTIVATION_FUNCTION_H
#define ACTIVATION_FUNCTION_H

#include <memory>
#include <string>

//-------------------------------------------------------------
//【类名】ActivationFunction
//【功能】激活函数抽象基类，定义接口
//【说明】支持多种非线性变换
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
class ActivationFunction {
public:
    //-------------------------------------------------------------
    //【函数名称】~ActivationFunction
    //【函数功能】虚析构函数
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    virtual ~ActivationFunction() = default;
    //-------------------------------------------------------------
    //【函数名称】activate
    //【函数功能】对输入值进行激活变换
    //【参数】x：输入值
    //【返回值】double，激活后输出
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    virtual double activate(double x) const = 0;
    //-------------------------------------------------------------
    //【函数名称】getName
    //【函数功能】获取激活函数名称
    //【参数】无
    //【返回值】std::string，函数名
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    virtual std::string getName() const = 0;
    
    //-------------------------------------------------------------
    //【函数名称】clone
    //【函数功能】克隆当前激活函数
    //【参数】无
    //【返回值】std::unique_ptr<ActivationFunction>，指向克隆对象的智能指针
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    virtual std::unique_ptr<ActivationFunction> clone() const = 0;
};

//-------------------------------------------------------------
//【类名】SigmoidFunction
//【功能】Sigmoid（S型）激活函数
//【说明】实现 f(x) = 1 / (1 + e^(-x))，输出范围 (0, 1)
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
class SigmoidFunction : public ActivationFunction {
public:
    //-------------------------------------------------------------
    //【函数名称】activate
    //【函数功能】Sigmoid 激活变换
    //【参数】x：输入值
    //【返回值】double，Sigmoid 输出（0到1之间）
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    double activate(double x) const override;
    //-------------------------------------------------------------
    //【函数名称】getName
    //【函数功能】获取函数名称
    //【参数】无
    //【返回值】std::string，函数名"Sigmoid"
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::string getName() const override;
    //-------------------------------------------------------------
    //【函数名称】clone
    //【函数功能】克隆函数
    //【参数】无
    //【返回值】std::unique_ptr<ActivationFunction>，克隆的Sigmoid函数
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::unique_ptr<ActivationFunction> clone() const override;
};

//-------------------------------------------------------------
//【类名】TanhFunction
//【功能】双曲正切激活函数
//【说明】实现 f(x) = tanh(x)，输出范围 (-1, 1)
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
class TanhFunction : public ActivationFunction {
public:
    //-------------------------------------------------------------
    //【函数名称】activate
    //【函数功能】Tanh 激活变换
    //【参数】x：输入值
    //【返回值】double，Tanh 输出（-1到1之间）
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    double activate(double x) const override;
    //-------------------------------------------------------------
    //【函数名称】getName
    //【函数功能】获取函数名称
    //【参数】无
    //【返回值】std::string，函数名"Tanh"
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::string getName() const override;
    //-------------------------------------------------------------
    //【函数名称】clone
    //【函数功能】克隆函数
    //【参数】无
    //【返回值】std::unique_ptr<ActivationFunction>，克隆的Tanh函数
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::unique_ptr<ActivationFunction> clone() const override;
};

//-------------------------------------------------------------
//【类名】ReLUFunction
//【功能】线性整流激活函数
//【说明】实现 f(x) = max(0, x)，输出范围 [0, +∞)
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
class ReLUFunction : public ActivationFunction {
public:
    //-------------------------------------------------------------
    //【函数名称】activate
    //【函数功能】ReLU 激活变换
    //【参数】x：输入值
    //【返回值】double，ReLU 输出（max(0, x)）
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    double activate(double x) const override;
    //-------------------------------------------------------------
    //【函数名称】getName
    //【函数功能】获取函数名称
    //【参数】无
    //【返回值】std::string，函数名"ReLU"
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::string getName() const override;
    //-------------------------------------------------------------
    //【函数名称】clone
    //【函数功能】克隆函数
    //【参数】无
    //【返回值】std::unique_ptr<ActivationFunction>，克隆的ReLU函数
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::unique_ptr<ActivationFunction> clone() const override;
};

//-------------------------------------------------------------
//【类名】LinearFunction
//【功能】线性激活函数（恒等函数）
//【说明】实现 f(x) = x，输出范围 (-∞, +∞)
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
class LinearFunction : public ActivationFunction {
public:
    //-------------------------------------------------------------
    //【函数名称】activate
    //【函数功能】线性激活变换
    //【参数】x：输入值
    //【返回值】double，线性输出（x）
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    double activate(double x) const override;
    //-------------------------------------------------------------
    //【函数名称】getName
    //【函数功能】获取函数名称
    //【参数】无
    //【返回值】std::string，函数名"Linear"
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::string getName() const override;
    //-------------------------------------------------------------
    //【函数名称】clone
    //【函数功能】克隆函数
    //【参数】无
    //【返回值】std::unique_ptr<ActivationFunction>，克隆的Linear函数
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::unique_ptr<ActivationFunction> clone() const override;
};

//-------------------------------------------------------------
//【函数名称】createActivationFunction
//【函数功能】根据名称创建激活函数的工厂函数
//【参数】name：激活函数名称（"Sigmoid"、"Tanh"、"ReLU"、"Linear"）
//【返回值】std::unique_ptr<ActivationFunction>，激活函数指针或nullptr
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
std::unique_ptr<ActivationFunction> createActivationFunction(const std::string& name);

#endif // ACTIVATION_FUNCTION_H
