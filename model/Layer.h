//-------------------------------------------------------------
//【文件名】Layer.h
//【功能模块和目的】神经网络层类声明
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------

#ifndef LAYER_H
#define LAYER_H

#include "Neuron.h"
#include <vector>
#include <memory>

//-------------------------------------------------------------
//【类名】Layer
//【功能】神经网络中的一层，管理多个神经元
//【说明】支持批量神经元管理与前向传播
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
class Layer {
private:
    std::vector<std::unique_ptr<Neuron>> m_neurons;
public:
    //-------------------------------------------------------------
    //【函数名称】Layer
    //【函数功能】默认构造函数
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    Layer();
    //-------------------------------------------------------------
    //【函数名称】Layer
    //【函数功能】带初始神经元数量的构造函数
    //【参数】neuronCount：神经元数量，bias：默认偏置，activationFunction：激活函数
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    Layer(int neuronCount, double bias = 0.0,
          std::unique_ptr<ActivationFunction> activationFunction = nullptr);
    //-------------------------------------------------------------
    //【函数名称】Layer（拷贝构造）
    //【函数功能】拷贝构造函数
    //【参数】other：被拷贝的层
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    Layer(const Layer& other);
    //-------------------------------------------------------------
    //【函数名称】operator=
    //【函数功能】赋值运算符重载
    //【参数】other：赋值来源层
    //【返回值】Layer&，自身引用
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    Layer& operator=(const Layer& other);
    //-------------------------------------------------------------
    //【函数名称】~Layer
    //【函数功能】析构函数
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    ~Layer();
    //-------------------------------------------------------------
    //【函数名称】addNeuron
    //【函数功能】添加神经元
    //【参数】neuron：神经元指针
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    void addNeuron(std::unique_ptr<Neuron> neuron);
    //-------------------------------------------------------------
    //【函数名称】removeNeuron
    //【函数功能】移除指定索引的神经元
    //【参数】index：神经元索引
    //【返回值】bool，是否移除成功
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool removeNeuron(int index);
    //-------------------------------------------------------------
    //【函数名称】getNeuron
    //【函数功能】获取指定索引的神经元指针
    //【参数】index：神经元索引
    //【返回值】Neuron*，神经元指针
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    Neuron* getNeuron(int index);
    //-------------------------------------------------------------
    //【函数名称】getNeuron（常量版本）
    //【函数功能】获取指定索引的神经元指针（常量）
    //【参数】index：神经元索引
    //【返回值】const Neuron*，神经元指针
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    const Neuron* getNeuron(int index) const;
    //-------------------------------------------------------------
    //【函数名称】getNeuronCount
    //【函数功能】获取神经元数量
    //【参数】无
    //【返回值】int，神经元数量
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    int getNeuronCount() const;
    //-------------------------------------------------------------
    //【函数名称】forwardPropagate
    //【函数功能】前向传播（每个神经元独立输入）
    //【参数】inputs：每个神经元的输入集合
    //【返回值】std::vector<double>，所有神经元输出
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::vector<double> forwardPropagate(const std::vector<std::vector<double>>& inputs);
    //-------------------------------------------------------------
    //【函数名称】forwardPropagateUniform
    //【函数功能】前向传播（所有神经元共用输入）
    //【参数】inputs：统一输入集合
    //【返回值】std::vector<double>，所有神经元输出
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    std::vector<double> forwardPropagateUniform(const std::vector<double>& inputs);
    //-------------------------------------------------------------
    //【函数名称】resetComputationState
    //【函数功能】重置所有神经元的计算状态
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    void resetComputationState();
    //-------------------------------------------------------------
    //【函数名称】isValid
    //【函数功能】判断层结构是否合法
    //【参数】无
    //【返回值】bool，结构是否合法
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool isValid() const;
    //-------------------------------------------------------------
    //【函数名称】clear
    //【函数功能】清空所有神经元
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    void clear();
    //-------------------------------------------------------------
    //【函数名称】getTotalSynapseCount
    //【函数功能】获取本层所有突触数量
    //【参数】无
    //【返回值】int，突触数量
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    int getTotalSynapseCount() const;
    //-------------------------------------------------------------
    //【函数名称】connectToLayer
    //【函数功能】连接到目标层
    //【参数】targetLayer：目标层，weights：连接权重（可选）
    //【返回值】bool，是否连接成功
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool connectToLayer(Layer& targetLayer, const std::vector<std::vector<double>>& weights = {});
    //-------------------------------------------------------------
    //【函数名称】disconnectAll
    //【函数功能】断开本层所有神经元的连接
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    void disconnectAll();
};

#endif // LAYER_H
