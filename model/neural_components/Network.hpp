//-------------------------------------------------------------
//【文件名】Network.hpp
//【功能模块和目的】神经网络整体结构声明
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------

#ifndef Network_hpp
#define Network_hpp

#include "Layer.hpp"
#include <vector>
#include <memory>
#include <string>

using namespace std;

//-------------------------------------------------------------
//【类名】Network
//【功能】人工神经网络顶层容器，管理多层结构
//【说明】支持推理、验证、结构修改等操作
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
class Network {
private:
    vector<unique_ptr<Layer>> m_layers;  ///< Collection of network layers
    string m_name;                            ///< Network name/identifier
    
    // Validation cache for import errors
    mutable bool m_hasImportErrors;           ///< Whether import had validation errors
    mutable string m_importErrorMessage;     ///< Detailed error message from import
    mutable bool m_validationCacheValid;     ///< Whether validation cache is current

public:
    //-------------------------------------------------------------
    //【函数名称】Network
    //【函数功能】默认构造函数
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    Network();
    
    //-------------------------------------------------------------
    //【函数名称】Network
    //【函数功能】带名称的构造函数
    //【参数】name：网络标识
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    explicit Network(const string& name);
    
    //-------------------------------------------------------------
    //【函数名称】Network（拷贝构造）
    //【函数功能】拷贝构造函数
    //【参数】other：被拷贝的网络
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    Network(const Network& other);
    
    //-------------------------------------------------------------
    //【函数名称】operator=
    //【函数功能】赋值运算符重载
    //【参数】other：赋值来源网络
    //【返回值】Network&，自身引用
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    Network& operator=(const Network& other);
    
    //-------------------------------------------------------------
    //【函数名称】~Network
    //【函数功能】析构函数
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    ~Network();
    
    //-------------------------------------------------------------
    //【函数名称】getName
    //【函数功能】获取网络名称
    //【参数】无
    //【返回值】const string&，网络名称
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    const string& getName() const;
    
    //-------------------------------------------------------------
    //【函数名称】setName
    //【函数功能】设置网络名称
    //【参数】name：新网络名称
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    void setName(const string& name);
    
    //-------------------------------------------------------------
    //【函数名称】addLayer
    //【函数功能】添加一层
    //【参数】layer：要添加的层指针
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    void addLayer(unique_ptr<Layer> layer);
    
    //-------------------------------------------------------------
    //【函数名称】removeLayer
    //【函数功能】移除指定索引的层
    //【参数】index：层索引
    //【返回值】bool，是否移除成功
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool removeLayer(int index);
    
    //-------------------------------------------------------------
    //【函数名称】getLayer
    //【函数功能】获取指定索引的层指针
    //【参数】index：层索引
    //【返回值】Layer*，层指针
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    Layer* getLayer(int index);
    
    //-------------------------------------------------------------
    //【函数名称】getLayer（常量版本）
    //【函数功能】获取指定索引的层指针（常量）
    //【参数】index：层索引
    //【返回值】const Layer*，层指针
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    const Layer* getLayer(int index) const;
    
    //-------------------------------------------------------------
    //【函数名称】getLayerCount
    //【函数功能】获取层数
    //【参数】无
    //【返回值】int，层数
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    int getLayerCount() const;
    
    //-------------------------------------------------------------
    //【函数名称】getNeuronCount
    //【函数功能】获取网络中神经元总数
    //【参数】无
    //【返回值】int，神经元总数
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    int getNeuronCount() const;
    
    //-------------------------------------------------------------
    //【函数名称】getSynapseCount
    //【函数功能】获取网络中突触总数
    //【参数】无
    //【返回值】int，突触总数
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    int getSynapseCount() const;
    
    //-------------------------------------------------------------
    //【函数名称】isValid
    //【函数功能】校验网络结构和连通性
    //【参数】无
    //【返回值】bool，网络是否有效
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool isValid() const;
    
    //-------------------------------------------------------------
    //【函数名称】predict
    //【函数功能】前向推理（前向传播）
    //【参数】inputs：第一层输入
    //【返回值】vector<double>，最后一层输出
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    vector<double> predict(const vector<double>& inputs);
    
    //-------------------------------------------------------------
    //【函数名称】resetComputationState
    //【函数功能】重置所有神经元的计算状态
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    void resetComputationState();
    
    //-------------------------------------------------------------
    //【函数名称】clear
    //【函数功能】清空所有层
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    void clear();
    
    //-------------------------------------------------------------
    //【函数名称】connectAllLayers
    //【函数功能】顺序连接所有层
    //【参数】defaultWeight：默认连接权重
    //【返回值】bool，是否全部连接成功
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool connectAllLayers(double defaultWeight = 1.0);
    
    //-------------------------------------------------------------
    //【函数名称】getStructureInfo
    //【函数功能】获取网络结构详细信息
    //【参数】无
    //【返回值】string，结构信息
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    string getStructureInfo() const;
    
    //-------------------------------------------------------------
    //【函数名称】hasCycles
    //【函数功能】判断网络是否有环（前馈网络应无环）
    //【参数】无
    //【返回值】bool，是否有环
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool hasCycles() const;
    
    //-------------------------------------------------------------
    //【函数名称】allNeuronsParticipate
    //【函数功能】校验所有神经元是否参与数据流
    //【参数】无
    //【返回值】bool，所有神经元是否可达
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool allNeuronsParticipate() const;

    //-------------------------------------------------------------
    //【函数名称】setImportError
    //【函数功能】设置导入错误信息（用于缓存验证错误）
    //【参数】errorMessage：错误信息
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    void setImportError(const string& errorMessage);
    
    //-------------------------------------------------------------
    //【函数名称】clearImportErrors
    //【函数功能】清除导入错误信息（网络修改后调用）
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    void clearImportErrors();
    
    //-------------------------------------------------------------
    //【函数名称】hasImportErrors
    //【函数功能】检查是否有导入错误
    //【参数】无
    //【返回值】bool，是否有导入错误
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    bool hasImportErrors() const;
    
    //-------------------------------------------------------------
    //【函数名称】getImportErrorMessage
    //【函数功能】获取导入错误信息
    //【参数】无
    //【返回值】string，错误信息
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    string getImportErrorMessage() const;
    
    //-------------------------------------------------------------
    //【函数名称】invalidateValidationCache
    //【函数功能】使验证缓存失效（网络修改后调用）
    //【参数】无
    //【返回值】无
    //【开发者及日期】林钲凯 2025-07-27
    //【更改记录】
    //-------------------------------------------------------------
    void invalidateValidationCache();
};

#endif // Network_hpp
