//-------------------------------------------------------------
//【文件名】ANNExporter.cpp
//【功能模块和目的】ANN格式神经网络模型导出器实现
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------

#include "ANNExporter.h"
#include "../model/ActivationFunction.h"
#include "../utils/FileUtils.h"
#include <iomanip>
#include <sstream>

//-------------------------------------------------------------
//【函数名称】ANNExporter
//【函数功能】构造函数
//【参数】无
//【返回值】无
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
ANNExporter::ANNExporter() {
}

//-------------------------------------------------------------
//【函数名称】~ANNExporter
//【函数功能】析构函数
//【参数】无
//【返回值】无
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
ANNExporter::~ANNExporter() {
}

//-------------------------------------------------------------
//【函数名称】exportNetwork
//【函数功能】导出神经网络到文件
//【参数】network：网络引用，filename：文件名
//【返回值】bool，是否导出成功
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
bool ANNExporter::exportNetwork(const Network& network, const std::string& filename) {
    if (!isFormatSupported(filename)) {
        return false;
    }
    
    if (!validateNetworkForExport(network)) {
        return false;
    }
    
    std::ofstream file(filename);
    if (!file.is_open()) {
        return false;
    }
    
    try {
        // Write file header
        writeComment(file, "ANN Neural Network File");
        writeComment(file, "Generated by ANN Exporter");
        file << std::endl;
        
        // Write network header
        if (!writeNetworkHeader(file, network)) {
            return false;
        }
        
        // Write layer information
        if (!writeLayerInformation(file, network)) {
            return false;
        }
        
        // Write connections
        if (!writeConnections(file, network)) {
            return false;
        }
        
        file.close();
        return true;
    }
    catch (const std::exception&) {
        return false;
    }
}

//-------------------------------------------------------------
//【函数名称】getSupportedExtensions
//【函数功能】获取支持的文件扩展名
//【参数】无
//【返回值】支持的文件扩展名字符串
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
std::string ANNExporter::getSupportedExtensions() const {
    return ".ann";
}

//-------------------------------------------------------------
//【函数名称】getExporterName
//【函数功能】获取导出器名称
//【参数】无
//【返回值】导出器名称字符串
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
std::string ANNExporter::getExporterName() const {
    return "ANN Exporter";
}

//-------------------------------------------------------------
//【函数名称】writeNetworkHeader
//【函数功能】写入网络头信息
//【参数】file：文件流，network：网络引用
//【返回值】bool，是否写入成功
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
bool ANNExporter::writeNetworkHeader(std::ofstream& file, const Network& network) {
    writeComment(file, "Network Header");
    file << "NETWORK " << network.getName() << std::endl;
    file << std::endl;
    return file.good();
}

//-------------------------------------------------------------
//【函数名称】writeLayerInformation
//【函数功能】写入层信息
//【参数】file：文件流，network：网络引用
//【返回值】bool，是否写入成功
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
bool ANNExporter::writeLayerInformation(std::ofstream& file, const Network& network) {
    writeComment(file, "Layer Information");
    file << "LAYERS " << network.getLayerCount() << std::endl;
    file << std::endl;
    
    for (int i = 0; i < network.getLayerCount(); ++i) {
        const Layer* layer = network.getLayer(i);
        if (!layer) {
            return false;
        }
        
        writeComment(file, "Layer " + std::to_string(i));
        file << "LAYER " << layer->getNeuronCount() << std::endl;
        
        if (!writeNeuronInformation(file, *layer)) {
            return false;
        }
        
        file << std::endl;
    }
    
    return file.good();
}

//-------------------------------------------------------------
//【函数名称】writeNeuronInformation
//【函数功能】写入神经元信息
//【参数】file：文件流，layer：层引用
//【返回值】bool，是否写入成功
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
bool ANNExporter::writeNeuronInformation(std::ofstream& file, const Layer& layer) {
    for (int i = 0; i < layer.getNeuronCount(); ++i) {
        const Neuron* neuron = layer.getNeuron(i);
        if (!neuron) {
            return false;
        }
        
        file << "NEURON " << std::fixed << std::setprecision(6) << neuron->getBias();
        
        const ActivationFunction* activationFunc = neuron->getActivationFunction();
        if (activationFunc) {
            file << " ACTIVATION " << getActivationFunctionName(activationFunc);
        }
        
        file << std::endl;
    }
    
    return file.good();
}

//-------------------------------------------------------------
//【函数名称】writeConnections
//【函数功能】写入连接信息
//【参数】file：文件流，network：网络引用
//【返回值】bool，是否写入成功
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
bool ANNExporter::writeConnections(std::ofstream& file, const Network& network) {
    writeComment(file, "Connection Information");
    
    // Count total connections
    int totalConnections = 0;
    std::ostringstream connectionData;
    
    for (int layerIndex = 0; layerIndex < network.getLayerCount(); ++layerIndex) {
        const Layer* layer = network.getLayer(layerIndex);
        if (!layer) continue;
        
        for (int neuronIndex = 0; neuronIndex < layer->getNeuronCount(); ++neuronIndex) {
            const Neuron* neuron = layer->getNeuron(neuronIndex);
            if (!neuron) continue;
            
            // Write output connections
            for (int synapseIndex = 0; synapseIndex < neuron->getOutputSynapseCount(); ++synapseIndex) {
                const Synapse* synapse = neuron->getOutputSynapse(synapseIndex);
                if (!synapse) continue;
                
                const Neuron* targetNeuron = synapse->getTargetNeuron();
                if (!targetNeuron) continue;
                
                // Find target neuron's layer and index
                bool found = false;
                for (int targetLayerIndex = 0; targetLayerIndex < network.getLayerCount() && !found; ++targetLayerIndex) {
                    const Layer* targetLayer = network.getLayer(targetLayerIndex);
                    if (!targetLayer) continue;
                    
                    for (int targetNeuronIndex = 0; targetNeuronIndex < targetLayer->getNeuronCount(); ++targetNeuronIndex) {
                        if (targetLayer->getNeuron(targetNeuronIndex) == targetNeuron) {
                            connectionData << "CONNECTION " << layerIndex << " " << neuronIndex 
                                         << " " << targetLayerIndex << " " << targetNeuronIndex 
                                         << " " << std::fixed << std::setprecision(6) << synapse->getWeight() 
                                         << std::endl;
                            totalConnections++;
                            found = true;
                            break;
                        }
                    }
                }
            }
        }
    }
    
    file << "CONNECTIONS " << totalConnections << std::endl;
    file << connectionData.str();
    
    return file.good();
}

//-------------------------------------------------------------
//【函数名称】writeComment
//【函数功能】写入注释
//【参数】file：文件流，comment：注释内容
//【返回值】无
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
void ANNExporter::writeComment(std::ofstream& file, const std::string& comment) {
    file << "# " << comment << std::endl;
}

//-------------------------------------------------------------
//【函数名称】getActivationFunctionName
//【函数功能】获取激活函数名称
//【参数】activationFunction：激活函数指针
//【返回值】激活函数名称字符串
//【开发者及日期】林钲凯 2025-07-27
//【更改记录】
//-------------------------------------------------------------
std::string ANNExporter::getActivationFunctionName(const ActivationFunction* activationFunction) {
    if (!activationFunction) {
        return "Linear";
    }
    return activationFunction->getName();
}
